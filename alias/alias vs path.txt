The alias built-in command creates a duplicate name for a (potentially much
longer) command. ln command is more versability
alias is usually used to create a shortcut to command
ln is usually used to create a shortcut to  file or directory

For example

which ls
[minhql@localhost ~]$ which ls
alias ls='ls --color=auto'
        /bin/ls
		
		
		
In path, ls command is set to /bin/ls
But in alias, ls command is set to ls --color=auto

Alias has higher priority than path. That's why, when you type ls. It will run alias first, then run path

An alias replaces part of your command with something else. If you wanted to save a few keystrokes on ls -l you could make an alias: alias ll=”ls –l”.
Any time you type ll by itself it will be expanded to ls -l. For example ll, ll -h, or ll *.doc are all good uses, giving you a long listing, a long listing with human readable sizes, and a long listing of all the .doc files, respectively. Typing all will not trigger the alias because aliases only operate on distinct words.

Aliases take priority over searching the path so you can make sure you always include options when running a command by redefining the command: alias rm=”rm –I”.
This redefines the rm command to always run rm -i, which prompts the user to delete instead of doing it silently.

You can defeat the alias temporarily by either fully qualifying your command (/bin/rm) or escaping it (\rm). It’s assumed that if you’re smart enough to override an alias, you’re smart enough to know the consequences of what you’re doing!